{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/ISetting",
  "definitions": {
    "ISetting": {
      "type": "object",
      "properties": {
        "githubSecret": {
          "type": "string",
          "description": "此 webhook 的 secret. 你要在 GitHub 的 webhook 设置里面设置这个 secret"
        },
        "dingWebhooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IDingWebhookItem"
          },
          "description": "需要推送通知的钉钉机器人的 webhook 地址"
        },
        "contentLimit": {
          "type": "number",
          "description": "通知的内容长度限制，超过这个长度的内容会被截断, -1 表示不截断（但消息仍受各平台能发送的最大字符影响，钉钉为 5k 字符）"
        },
        "isCommunity": {
          "type": "boolean",
          "description": "只推送社区需要的那几个 event： [ 'issues.opened', 'pull_request.opened', 'discussion.created', 'release.released' ]\n\n代码见：https://github.com/opensumi/github-bot/blob/main/src/github/templates/index.ts#L25",
          "default": false
        },
        "event": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmitterWebhookEventName"
          },
          "description": "要将哪些事件发送到钉钉群中。注意：设置了当前字段，isCommunity 就会失效"
        },
        "workflowEventToNotify": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "通知 workflow 的成功、失败事件 键是仓库的名字，值是某个 workflow 的名字(yml 中配置的 name 字段) 比如说：`{ 'opensumi/actions': ['sync to npmmirror'] }`"
        },
        "notDisplayRepoName": {
          "type": "boolean",
          "description": "不在消息中展示 repo 名字，适合单仓库",
          "default": false
        }
      },
      "required": ["githubSecret", "dingWebhooks", "contentLimit"],
      "additionalProperties": false
    },
    "IDingWebhookItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Webhook url"
        },
        "secret": {
          "type": "string",
          "description": "You should select **signed mode(加签模式)** in the security settings of the bot. and you will see the secret."
        },
        "event": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmitterWebhookEventName"
          },
          "description": "哪些事件需要推送到这个 webhook，如：`release.released`。 不填写则推送所有事件"
        },
        "remark": {
          "type": "string",
          "description": "备注。你可以在这个空里备注下这个 webhook 是属于哪个群的。",
          "format": "textarea"
        }
      },
      "required": ["url", "secret"],
      "additionalProperties": false
    },
    "EmitterWebhookEventName": {
      "type": "string",
      "enum": [
        "branch_protection_rule",
        "branch_protection_rule.created",
        "branch_protection_rule.deleted",
        "branch_protection_rule.edited",
        "check_run",
        "check_run.completed",
        "check_run.created",
        "check_run.requested_action",
        "check_run.rerequested",
        "check_suite",
        "check_suite.completed",
        "check_suite.requested",
        "check_suite.rerequested",
        "code_scanning_alert",
        "code_scanning_alert.appeared_in_branch",
        "code_scanning_alert.closed_by_user",
        "code_scanning_alert.created",
        "code_scanning_alert.fixed",
        "code_scanning_alert.reopened",
        "code_scanning_alert.reopened_by_user",
        "commit_comment",
        "commit_comment.created",
        "create",
        "delete",
        "dependabot_alert",
        "dependabot_alert.created",
        "dependabot_alert.dismissed",
        "dependabot_alert.fixed",
        "dependabot_alert.reintroduced",
        "dependabot_alert.reopened",
        "deploy_key",
        "deploy_key.created",
        "deploy_key.deleted",
        "deployment",
        "deployment.created",
        "deployment_protection_rule",
        "deployment_protection_rule.requested",
        "deployment_status",
        "deployment_status.created",
        "discussion",
        "discussion.answered",
        "discussion.category_changed",
        "discussion.created",
        "discussion.deleted",
        "discussion.edited",
        "discussion.labeled",
        "discussion.locked",
        "discussion.pinned",
        "discussion.transferred",
        "discussion.unanswered",
        "discussion.unlabeled",
        "discussion.unlocked",
        "discussion.unpinned",
        "discussion_comment",
        "discussion_comment.created",
        "discussion_comment.deleted",
        "discussion_comment.edited",
        "fork",
        "github_app_authorization",
        "github_app_authorization.revoked",
        "gollum",
        "installation",
        "installation.created",
        "installation.deleted",
        "installation.new_permissions_accepted",
        "installation.suspend",
        "installation.unsuspend",
        "installation_repositories",
        "installation_repositories.added",
        "installation_repositories.removed",
        "installation_target",
        "installation_target.renamed",
        "issue_comment",
        "issue_comment.created",
        "issue_comment.deleted",
        "issue_comment.edited",
        "issues",
        "issues.assigned",
        "issues.closed",
        "issues.deleted",
        "issues.demilestoned",
        "issues.edited",
        "issues.labeled",
        "issues.locked",
        "issues.milestoned",
        "issues.opened",
        "issues.pinned",
        "issues.reopened",
        "issues.transferred",
        "issues.unassigned",
        "issues.unlabeled",
        "issues.unlocked",
        "issues.unpinned",
        "label",
        "label.created",
        "label.deleted",
        "label.edited",
        "marketplace_purchase",
        "marketplace_purchase.cancelled",
        "marketplace_purchase.changed",
        "marketplace_purchase.pending_change",
        "marketplace_purchase.pending_change_cancelled",
        "marketplace_purchase.purchased",
        "member",
        "member.added",
        "member.edited",
        "member.removed",
        "membership",
        "membership.added",
        "membership.removed",
        "merge_group",
        "merge_group.checks_requested",
        "meta",
        "meta.deleted",
        "milestone",
        "milestone.closed",
        "milestone.created",
        "milestone.deleted",
        "milestone.edited",
        "milestone.opened",
        "org_block",
        "org_block.blocked",
        "org_block.unblocked",
        "organization",
        "organization.deleted",
        "organization.member_added",
        "organization.member_invited",
        "organization.member_removed",
        "organization.renamed",
        "package",
        "package.published",
        "package.updated",
        "page_build",
        "ping",
        "project",
        "project.closed",
        "project.created",
        "project.deleted",
        "project.edited",
        "project.reopened",
        "project_card",
        "project_card.converted",
        "project_card.created",
        "project_card.deleted",
        "project_card.edited",
        "project_card.moved",
        "project_column",
        "project_column.created",
        "project_column.deleted",
        "project_column.edited",
        "project_column.moved",
        "projects_v2_item",
        "projects_v2_item.archived",
        "projects_v2_item.converted",
        "projects_v2_item.created",
        "projects_v2_item.deleted",
        "projects_v2_item.edited",
        "projects_v2_item.reordered",
        "projects_v2_item.restored",
        "public",
        "pull_request",
        "pull_request.assigned",
        "pull_request.auto_merge_disabled",
        "pull_request.auto_merge_enabled",
        "pull_request.closed",
        "pull_request.converted_to_draft",
        "pull_request.demilestoned",
        "pull_request.dequeued",
        "pull_request.edited",
        "pull_request.enqueued",
        "pull_request.labeled",
        "pull_request.locked",
        "pull_request.milestoned",
        "pull_request.opened",
        "pull_request.ready_for_review",
        "pull_request.reopened",
        "pull_request.review_request_removed",
        "pull_request.review_requested",
        "pull_request.synchronize",
        "pull_request.unassigned",
        "pull_request.unlabeled",
        "pull_request.unlocked",
        "pull_request_review",
        "pull_request_review.dismissed",
        "pull_request_review.edited",
        "pull_request_review.submitted",
        "pull_request_review_comment",
        "pull_request_review_comment.created",
        "pull_request_review_comment.deleted",
        "pull_request_review_comment.edited",
        "pull_request_review_thread",
        "pull_request_review_thread.resolved",
        "pull_request_review_thread.unresolved",
        "push",
        "registry_package",
        "registry_package.published",
        "registry_package.updated",
        "release",
        "release.created",
        "release.deleted",
        "release.edited",
        "release.prereleased",
        "release.published",
        "release.released",
        "release.unpublished",
        "repository",
        "repository.archived",
        "repository.created",
        "repository.deleted",
        "repository.edited",
        "repository.privatized",
        "repository.publicized",
        "repository.renamed",
        "repository.transferred",
        "repository.unarchived",
        "repository_dispatch",
        "repository_import",
        "repository_vulnerability_alert",
        "repository_vulnerability_alert.create",
        "repository_vulnerability_alert.dismiss",
        "repository_vulnerability_alert.reopen",
        "repository_vulnerability_alert.resolve",
        "secret_scanning_alert",
        "secret_scanning_alert.created",
        "secret_scanning_alert.reopened",
        "secret_scanning_alert.resolved",
        "secret_scanning_alert.revoked",
        "secret_scanning_alert_location",
        "secret_scanning_alert_location.created",
        "security_advisory",
        "security_advisory.performed",
        "security_advisory.published",
        "security_advisory.updated",
        "security_advisory.withdrawn",
        "sponsorship",
        "sponsorship.cancelled",
        "sponsorship.created",
        "sponsorship.edited",
        "sponsorship.pending_cancellation",
        "sponsorship.pending_tier_change",
        "sponsorship.tier_changed",
        "star",
        "star.created",
        "star.deleted",
        "status",
        "team",
        "team.added_to_repository",
        "team.created",
        "team.deleted",
        "team.edited",
        "team.removed_from_repository",
        "team_add",
        "watch",
        "watch.started",
        "workflow_dispatch",
        "workflow_job",
        "workflow_job.completed",
        "workflow_job.in_progress",
        "workflow_job.queued",
        "workflow_job.waiting",
        "workflow_run",
        "workflow_run.completed",
        "workflow_run.in_progress",
        "workflow_run.requested"
      ],
      "format": "selectize"
    }
  }
}
